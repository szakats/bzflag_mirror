Todo list, in no particular order:

  - Add some sort of color-selection mechanism (for showing selected objects, widget
    highlighting, etc)

  - Put together a way to tweak particle system parameters in realtime to construct the best
    possible systems. This could use an external GUI like gtk, or maybe we complete the 3D
    widget idea.

  - A system for generating dynamic impostors. All the existing dynamic texture infrastructure
    should make this relatively simple. These will be useful for clouds, smoke, and volumetric
    fog to dramatically reduce overdraw.
       http://graphics.lcs.mit.edu/~gs/papers/05_imposter_95.pdf

  - Clouds:
      * Vary the cloud velocity according to the current global wind speed.

      * Find a way to update the clouds frequently enough we can have them form and dissipate
        properly with changing weather. This could involve finding a replacement for the exp()
        mapping, or possibly breaking it into multiple steps so the slow process of updating
        them wouldn't cause noticeable jerkiness. Python 2.2's generators could work very
        nicely for this. Since the backbuffer would not be preserved between frames, it would
        make the most sense to implement a way to render the noise textures in many small pieces,
        then render one new piece each frame.

      * Light the clouds using bump mapping, so we can get nice edge hilights?

      * optional: change all the clouds to use the technique that MS Flight Sim:
        A Century of Flight uses, because it rawks

  - Stars, sun and the moon

  - Enhance the ThreeDController binding system: move functionality to detect pressed
    buttons and modifiers to separate Criteria classes that can be listed when setting
    a binding. Add a Criteria for the mouse being over a named object. Move binding
    setup to a data/config.py or something similar.

  - Better options/configuration system. For example, it should be possible to switch
    between mono, stereo, and anaglyph mode transparently in any part of pybzflag.
    It should be possible to pass view-dependent options to commands for window geometry,
    fullscreen, disabling window borders, etc.

    How about a BZFlag.Config module that stores all configuration settings? There could
    be a Config.Loader module to manage it all, Config.Default to hold default settings,
    and a ~/.pybzflag for user customizations. The config files would be python code,
    executed in the Config module's namespace.

  - Write more documentation :)

  - Complete the Unicode support in GLText. This means deleting rarely used texture pages
    to prevent uncontrolled memory usage, and automatically loading auxiliary fonts
    when a character can't be located.

  - Finish the server

  - Bots!

  - Write a playable client

  - In OverheadView, update using dirty rectangles for lower CPU usage

  - Use a uniform distribution rather than a normal distribution to decide cubemap
    update times, make the times configurable.

  - Unify the world and VRML caches. There should be a base class that
    manages creating, storing, and loading the actual cache data, with 
    subclasses only providing a way to generate cacheable data and create
    hashes.

