Todo list, in no particular order:

  - Fix texture binding for cube maps. It causes an OpenGL invalid operation error, I'm not sure
    why. Currently these exceptions are being ignored in CubeMap.py, and all pyramids end up
    sharing one cube map.

  - Convert observers and render sequence callbacks to use weak references so it's possible
    to properly delete objects that register callbacks.

  - Enhance the ThreeDController binding system: move functionality to detect pressed
    buttons and modifiers to separate Criteria classes that can be listed when setting
    a binding. Add a Criteria for the mouse being over a named object. Move binding
    setup to a data/config.py or something similar.

  - Better options/configuration system. For example, it should be possible to switch
    between mono, stereo, and anaglyph mode transparently in any part of pybzflag.
    It should be possible to pass view-dependent options to commands for window geometry,
    fullscreen, disabling window borders, etc.

  - Unify the world cache and VRML cache

  - Add gamma correction to GLText so that the alpha blending doesn't look hideous
    when drawing light text on a dark background.

  - Add a way to remove observer clients easily. Perhaps it could be required that observer
    clients are bound methods, then there could be a way to remove all observer clients
    bound to a specific class instance.

  - Draw players in the ThreeDView

  - Write more documentation :)

  - Complete the Unicode support in GLText. This means deleting rarely used texture pages
    to prevent uncontrolled memory usage, and automatically loading auxiliary fonts
    when a character can't be located.

  - Finish the server

  - Bots!

  - Write a playable client

  - fix resizing: what might be an SDL bug is causing the window to get stuck
    resizing to its original size when using a WM or equivalent that does
    opaque resizing. Known to break under sawfish, win32, and OS X.

  - Better textures/lighting possibly, maybe multitexturing so long range
    views don't look so boring and the 'grass' isn't so bad. This is supposed
    to be protocol-compatible with BZFlag, but doesn't have to look just like it :)

  - In OverheadView, update using dirty rectangles for lower CPU usage
